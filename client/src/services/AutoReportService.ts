import { 
  Report, 
  ReportType, 
  ReportStatistics, 
  WorkLog, 
  Task, 
  HierarchicalPlan,
  TaskStatus,
  PlanType 
} from '../types';

export interface AutoReportConfig {
  enableAutoGeneration: boolean;
  reportTypes: ReportType[];
  generateOnSchedule: boolean;
  scheduleTime: string; // HH:MM format
  includeStatistics: boolean;
  includeCharts: boolean;
  notifyOnGeneration?: boolean;
  customTemplate?: string;
}

export interface ReportGenerationContext {
  startDate: Date;
  endDate: Date;
  workLogs: WorkLog[];
  tasks: Task[];
  plans: HierarchicalPlan[];
  previousReports?: Report[];
}

export class AutoReportService {
  private static instance: AutoReportService;
  private config: AutoReportConfig;

  private constructor() {
    this.config = this.loadConfig();
  }

  public static getInstance(): AutoReportService {
    if (!AutoReportService.instance) {
      AutoReportService.instance = new AutoReportService();
    }
    return AutoReportService.instance;
  }

  private loadConfig(): AutoReportConfig {
    const savedConfig = localStorage.getItem('auto_report_config');
    if (savedConfig) {
      return JSON.parse(savedConfig);
    }
    
    // 默认配置
    return {
      enableAutoGeneration: true,
      reportTypes: [
        ReportType.DAILY_LOG,
        ReportType.WEEKLY_REPORT,
        ReportType.MONTHLY_REPORT,
        ReportType.QUARTERLY_REPORT
      ],
      generateOnSchedule: true,
      scheduleTime: '18:00',
      includeStatistics: true,
      includeCharts: true
    };
  }

  public saveConfig(config: AutoReportConfig): void {
    this.config = config;
    localStorage.setItem('auto_report_config', JSON.stringify(config));
  }

  public updateConfig(updates: Partial<AutoReportConfig>): void {
    this.config = { ...this.config, ...updates };
    localStorage.setItem('auto_report_config', JSON.stringify(this.config));
  }

  public getConfig(): AutoReportConfig {
    return { ...this.config };
  }

  // 生成日报
  public generateDailyReport(context: ReportGenerationContext): Report {
    const { startDate, endDate, workLogs, tasks } = context;
    
    const dayLogs = workLogs.filter(log => 
      log.date >= startDate && log.date <= endDate
    );
    
    const dayTasks = tasks.filter(task => 
      task.createdAt >= startDate && task.createdAt <= endDate
    );

    const statistics = this.calculateStatistics(dayLogs, dayTasks);
    const content = this.generateDailyContent(dayLogs, dayTasks, statistics);

    return {
      id: `daily-${startDate.toISOString().split('T')[0]}`,
      title: `${startDate.toLocaleDateString('zh-CN')} 工作日志`,
      type: ReportType.DAILY_LOG,
      period: startDate.toLocaleDateString('zh-CN'),
      year: startDate.getFullYear(),
      month: startDate.getMonth() + 1,
      startDate,
      endDate,
      content,
      autoGenerated: true,
      isEdited: false,
      sourceReportIds: [],
      sourceWorkLogIds: dayLogs.map(log => log.id),
      statistics,
      userId: 'current-user',
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }

  // 生成周报
  public generateWeeklyReport(context: ReportGenerationContext): Report {
    const { startDate, endDate, workLogs, tasks } = context;
    
    const weekLogs = workLogs.filter(log => 
      log.date >= startDate && log.date <= endDate
    );
    
    const weekTasks = tasks.filter(task => 
      task.createdAt >= startDate && task.createdAt <= endDate
    );

    const statistics = this.calculateStatistics(weekLogs, weekTasks);
    const content = this.generateWeeklyContent(weekLogs, weekTasks, statistics);

    const weekNumber = this.getWeekNumber(startDate);

    return {
      id: `weekly-${startDate.getFullYear()}-${weekNumber}`,
      title: `${startDate.getFullYear()}年第${weekNumber}周工作周报`,
      type: ReportType.WEEKLY_REPORT,
      period: `${startDate.getFullYear()}年第${weekNumber}周`,
      year: startDate.getFullYear(),
      week: weekNumber,
      startDate,
      endDate,
      content,
      autoGenerated: true,
      isEdited: false,
      sourceReportIds: [],
      sourceWorkLogIds: weekLogs.map(log => log.id),
      statistics,
      userId: 'current-user',
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }

  // 生成月报
  public generateMonthlyReport(context: ReportGenerationContext): Report {
    const { startDate, endDate, workLogs, tasks, previousReports } = context;
    
    const monthLogs = workLogs.filter(log => 
      log.date >= startDate && log.date <= endDate
    );
    
    const monthTasks = tasks.filter(task => 
      task.createdAt >= startDate && task.createdAt <= endDate
    );

    // 获取本月的周报作为源报告
    const weeklyReports = previousReports?.filter(report => 
      report.type === ReportType.WEEKLY_REPORT &&
      report.startDate >= startDate && 
      report.endDate <= endDate
    ) || [];

    const statistics = this.calculateStatistics(monthLogs, monthTasks);
    const content = this.generateMonthlyContent(monthLogs, monthTasks, statistics, weeklyReports);

    return {
      id: `monthly-${startDate.getFullYear()}-${startDate.getMonth() + 1}`,
      title: `${startDate.getFullYear()}年${startDate.getMonth() + 1}月工作月报`,
      type: ReportType.MONTHLY_REPORT,
      period: `${startDate.getFullYear()}年${startDate.getMonth() + 1}月`,
      year: startDate.getFullYear(),
      month: startDate.getMonth() + 1,
      startDate,
      endDate,
      content,
      autoGenerated: true,
      isEdited: false,
      sourceReportIds: weeklyReports.map(report => report.id),
      sourceWorkLogIds: monthLogs.map(log => log.id),
      statistics,
      userId: 'current-user',
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }

  // 生成季报
  public generateQuarterlyReport(context: ReportGenerationContext): Report {
    const { startDate, endDate, workLogs, tasks, previousReports } = context;
    
    const quarterLogs = workLogs.filter(log => 
      log.date >= startDate && log.date <= endDate
    );
    
    const quarterTasks = tasks.filter(task => 
      task.createdAt >= startDate && task.createdAt <= endDate
    );

    // 获取本季度的月报作为源报告
    const monthlyReports = previousReports?.filter(report => 
      report.type === ReportType.MONTHLY_REPORT &&
      report.startDate >= startDate && 
      report.endDate <= endDate
    ) || [];

    const statistics = this.calculateStatistics(quarterLogs, quarterTasks);
    const content = this.generateQuarterlyContent(quarterLogs, quarterTasks, statistics, monthlyReports);

    const quarter = Math.floor(startDate.getMonth() / 3) + 1;

    return {
      id: `quarterly-${startDate.getFullYear()}-${quarter}`,
      title: `${startDate.getFullYear()}年第${quarter}季度工作季报`,
      type: ReportType.QUARTERLY_REPORT,
      period: `${startDate.getFullYear()}年第${quarter}季度`,
      year: startDate.getFullYear(),
      quarter,
      startDate,
      endDate,
      content,
      autoGenerated: true,
      isEdited: false,
      sourceReportIds: monthlyReports.map(report => report.id),
      sourceWorkLogIds: quarterLogs.map(log => log.id),
      statistics,
      userId: 'current-user',
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }

  // 生成半年报
  public generateHalfYearlyReport(context: ReportGenerationContext): Report {
    const { startDate, endDate, workLogs, tasks, previousReports } = context;
    
    const halfYearLogs = workLogs.filter(log => 
      log.date >= startDate && log.date <= endDate
    );
    
    const halfYearTasks = tasks.filter(task => 
      task.createdAt >= startDate && task.createdAt <= endDate
    );

    // 获取半年内的季报作为源报告
    const quarterlyReports = previousReports?.filter(report => 
      report.type === ReportType.QUARTERLY_REPORT &&
      report.startDate >= startDate && 
      report.endDate <= endDate
    ) || [];

    const statistics = this.calculateStatistics(halfYearLogs, halfYearTasks);
    const content = this.generateHalfYearlyContent(halfYearLogs, halfYearTasks, statistics, quarterlyReports);

    const halfYear = startDate.getMonth() < 6 ? 1 : 2;

    return {
      id: `half-yearly-${startDate.getFullYear()}-${halfYear}`,
      title: `${startDate.getFullYear()}年${halfYear === 1 ? '上' : '下'}半年工作报告`,
      type: ReportType.HALF_YEARLY_REPORT,
      period: `${startDate.getFullYear()}年${halfYear === 1 ? '上' : '下'}半年`,
      year: startDate.getFullYear(),
      startDate,
      endDate,
      content,
      autoGenerated: true,
      isEdited: false,
      sourceReportIds: quarterlyReports.map(report => report.id),
      sourceWorkLogIds: halfYearLogs.map(log => log.id),
      statistics,
      userId: 'current-user',
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }

  // 生成年报
  public generateYearlyReport(context: ReportGenerationContext): Report {
    const { startDate, endDate, workLogs, tasks, previousReports } = context;
    
    const yearLogs = workLogs.filter(log => 
      log.date >= startDate && log.date <= endDate
    );
    
    const yearTasks = tasks.filter(task => 
      task.createdAt >= startDate && task.createdAt <= endDate
    );

    // 获取全年的半年报作为源报告
    const halfYearlyReports = previousReports?.filter(report => 
      report.type === ReportType.HALF_YEARLY_REPORT &&
      report.startDate >= startDate && 
      report.endDate <= endDate
    ) || [];

    const statistics = this.calculateStatistics(yearLogs, yearTasks);
    const content = this.generateYearlyContent(yearLogs, yearTasks, statistics, halfYearlyReports);

    return {
      id: `yearly-${startDate.getFullYear()}`,
      title: `${startDate.getFullYear()}年度工作报告`,
      type: ReportType.YEARLY_REPORT,
      period: `${startDate.getFullYear()}年`,
      year: startDate.getFullYear(),
      startDate,
      endDate,
      content,
      autoGenerated: true,
      isEdited: false,
      sourceReportIds: halfYearlyReports.map(report => report.id),
      sourceWorkLogIds: yearLogs.map(log => log.id),
      statistics,
      userId: 'current-user',
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }

  // 计算统计数据
  private calculateStatistics(workLogs: WorkLog[], tasks: Task[]): ReportStatistics {
    const totalTasks = tasks.length;
    const completedTasks = tasks.filter(task => task.status === TaskStatus.COMPLETED).length;
    const totalTimeSpent = workLogs.reduce((sum, log) => {
      const plannedTime = log.plannedTasks.reduce((taskSum, task) => taskSum + (task.timeSpent || 0), 0);
      const unplannedTime = log.unplannedTasks.reduce((taskSum, task) => taskSum + (task.timeSpent || 0), 0);
      return sum + plannedTime + unplannedTime;
    }, 0);
    
    // 计算计划内外任务
    const plannedTasksCount = tasks.filter(task => task.planId).length;
    const unplannedTasksCount = totalTasks - plannedTasksCount;
    
    const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;

    // 按分类统计
    const categoryMap = new Map<string, { timeSpent: number; taskCount: number; categoryName: string }>();
    
    workLogs.forEach(log => {
      // 处理计划内任务
      log.plannedTasks.forEach(task => {
        if (task.task?.categoryId) {
          const categoryId = task.task.categoryId;
          const existing = categoryMap.get(categoryId) || { timeSpent: 0, taskCount: 0, categoryName: task.task.category?.name || categoryId };
          existing.timeSpent += task.timeSpent || 0;
          categoryMap.set(categoryId, existing);
        }
      });
      
      // 处理计划外任务
      log.unplannedTasks.forEach(task => {
        if (task.task?.categoryId) {
          const categoryId = task.task.categoryId;
          const existing = categoryMap.get(categoryId) || { timeSpent: 0, taskCount: 0, categoryName: task.task.category?.name || categoryId };
          existing.timeSpent += task.timeSpent || 0;
          categoryMap.set(categoryId, existing);
        }
      });
    });

    tasks.forEach(task => {
      if (task.categoryId) {
        const existing = categoryMap.get(task.categoryId) || { timeSpent: 0, taskCount: 0, categoryName: task.categoryId };
        existing.taskCount += 1;
        categoryMap.set(task.categoryId, existing);
      }
    });

    const categoryBreakdown = Array.from(categoryMap.entries()).map(([categoryId, data]) => ({
      categoryId,
      categoryName: data.categoryName,
      timeSpent: data.timeSpent,
      taskCount: data.taskCount
    }));

    return {
      totalTasks,
      completedTasks,
      totalTimeSpent,
      plannedTasksCount,
      unplannedTasksCount,
      completionRate,
      categoryBreakdown
    };
  }

  // 生成日报内容
  private generateDailyContent(workLogs: WorkLog[], tasks: Task[], statistics: ReportStatistics): string {
    const template = this.config.customTemplate || this.getDefaultDailyTemplate();
    
    let content = template;
    content = content.replace('{{date}}', new Date().toLocaleDateString('zh-CN'));
    content = content.replace('{{totalTasks}}', statistics.totalTasks.toString());
    content = content.replace('{{completedTasks}}', statistics.completedTasks.toString());
    content = content.replace('{{totalTime}}', this.formatTime(statistics.totalTimeSpent));
    content = content.replace('{{completionRate}}', statistics.completionRate.toFixed(1));

    // 添加具体任务列表
    const taskList = tasks.map(task => 
      `- ${task.title} (${this.getTaskStatusText(task.status)})`
    ).join('\n');
    content = content.replace('{{taskList}}', taskList);

    return content;
  }

  // 生成周报内容
  private generateWeeklyContent(workLogs: WorkLog[], tasks: Task[], statistics: ReportStatistics): string {
    const template = this.getDefaultWeeklyTemplate();
    
    let content = template;
    content = content.replace('{{totalTasks}}', statistics.totalTasks.toString());
    content = content.replace('{{completedTasks}}', statistics.completedTasks.toString());
    content = content.replace('{{totalTime}}', this.formatTime(statistics.totalTimeSpent));
    content = content.replace('{{completionRate}}', statistics.completionRate.toFixed(1));

    // 按分类汇总
    const categoryStats = statistics.categoryBreakdown.map(cat => 
      `- ${cat.categoryName}: ${cat.taskCount}个任务, ${this.formatTime(cat.timeSpent)}`
    ).join('\n');
    content = content.replace('{{categoryStats}}', categoryStats);

    return content;
  }

  // 生成月报内容
  private generateMonthlyContent(workLogs: WorkLog[], tasks: Task[], statistics: ReportStatistics, weeklyReports: Report[]): string {
    const template = this.getDefaultMonthlyTemplate();
    
    let content = template;
    content = content.replace('{{totalTasks}}', statistics.totalTasks.toString());
    content = content.replace('{{completedTasks}}', statistics.completedTasks.toString());
    content = content.replace('{{totalTime}}', this.formatTime(statistics.totalTimeSpent));
    content = content.replace('{{completionRate}}', statistics.completionRate.toFixed(1));

    // 周报汇总
    const weeklySum = weeklyReports.map(report => 
      `第${report.week}周: 完成${report.statistics.completedTasks}个任务`
    ).join('\n');
    content = content.replace('{{weeklySum}}', weeklySum);

    return content;
  }

  // 生成季报内容
  private generateQuarterlyContent(workLogs: WorkLog[], tasks: Task[], statistics: ReportStatistics, monthlyReports: Report[]): string {
    const template = this.getDefaultQuarterlyTemplate();
    
    let content = template;
    content = content.replace('{{totalTasks}}', statistics.totalTasks.toString());
    content = content.replace('{{completedTasks}}', statistics.completedTasks.toString());
    content = content.replace('{{totalTime}}', this.formatTime(statistics.totalTimeSpent));
    content = content.replace('{{completionRate}}', statistics.completionRate.toFixed(1));

    // 月报汇总
    const monthlySum = monthlyReports.map(report => 
      `${report.month}月: 完成${report.statistics.completedTasks}个任务, 耗时${this.formatTime(report.statistics.totalTimeSpent)}`
    ).join('\n');
    content = content.replace('{{monthlySum}}', monthlySum);

    return content;
  }

  // 生成半年报内容
  private generateHalfYearlyContent(workLogs: WorkLog[], tasks: Task[], statistics: ReportStatistics, quarterlyReports: Report[]): string {
    const template = this.getDefaultHalfYearlyTemplate();
    
    let content = template;
    content = content.replace('{{totalTasks}}', statistics.totalTasks.toString());
    content = content.replace('{{completedTasks}}', statistics.completedTasks.toString());
    content = content.replace('{{totalTime}}', this.formatTime(statistics.totalTimeSpent));
    content = content.replace('{{completionRate}}', statistics.completionRate.toFixed(1));

    // 季报汇总
    const quarterlySum = quarterlyReports.map(report => 
      `第${report.quarter}季度: 完成${report.statistics.completedTasks}个任务, 耗时${this.formatTime(report.statistics.totalTimeSpent)}`
    ).join('\n');
    content = content.replace('{{quarterlySum}}', quarterlySum);

    return content;
  }

  // 生成年报内容
  private generateYearlyContent(workLogs: WorkLog[], tasks: Task[], statistics: ReportStatistics, halfYearlyReports: Report[]): string {
    const template = this.getDefaultYearlyTemplate();
    
    let content = template;
    content = content.replace('{{totalTasks}}', statistics.totalTasks.toString());
    content = content.replace('{{completedTasks}}', statistics.completedTasks.toString());
    content = content.replace('{{totalTime}}', this.formatTime(statistics.totalTimeSpent));
    content = content.replace('{{completionRate}}', statistics.completionRate.toFixed(1));

    // 半年报汇总
    const halfYearlySum = halfYearlyReports.map((report, index) => 
      `${index === 0 ? '上' : '下'}半年: 完成${report.statistics.completedTasks}个任务, 耗时${this.formatTime(report.statistics.totalTimeSpent)}`
    ).join('\n');
    content = content.replace('{{halfYearlySum}}', halfYearlySum);

    return content;
  }

  // 默认模板
  private getDefaultDailyTemplate(): string {
    return `# {{date}} 工作日志

## 工作概况
今日共处理 {{totalTasks}} 个任务，完成 {{completedTasks}} 个，完成率 {{completionRate}}%，总耗时 {{totalTime}}。

## 任务详情
{{taskList}}

## 总结
今日工作进展顺利，按计划完成了主要任务。`;
  }

  private getDefaultWeeklyTemplate(): string {
    return `# 本周工作总结

## 工作概况
本周共处理 {{totalTasks}} 个任务，完成 {{completedTasks}} 个，完成率 {{completionRate}}%，总耗时 {{totalTime}}。

## 分类统计
{{categoryStats}}

## 下周计划
根据本周工作情况，下周将重点关注...`;
  }

  private getDefaultMonthlyTemplate(): string {
    return `# 月度工作报告

## 工作概况
本月共处理 {{totalTasks}} 个任务，完成 {{completedTasks}} 个，完成率 {{completionRate}}%，总耗时 {{totalTime}}。

## 周度汇总
{{weeklySum}}

## 月度总结
本月工作重点...

## 下月计划
下月将重点推进...`;
  }

  private getDefaultQuarterlyTemplate(): string {
    return `# 季度工作报告

## 工作概况
本季度共处理 {{totalTasks}} 个任务，完成 {{completedTasks}} 个，完成率 {{completionRate}}%，总耗时 {{totalTime}}。

## 月度汇总
{{monthlySum}}

## 季度总结
本季度主要成果...

## 下季度规划
下季度工作重点...`;
  }

  private getDefaultHalfYearlyTemplate(): string {
    return `# 半年度工作报告

## 工作概况
半年来共处理 {{totalTasks}} 个任务，完成 {{completedTasks}} 个，完成率 {{completionRate}}%，总耗时 {{totalTime}}。

## 季度汇总
{{quarterlySum}}

## 半年总结
半年来主要成果和经验...

## 下半年规划
下半年工作重点和目标...`;
  }

  private getDefaultYearlyTemplate(): string {
    return `# 年度工作报告

## 工作概况
全年共处理 {{totalTasks}} 个任务，完成 {{completedTasks}} 个，完成率 {{completionRate}}%，总耗时 {{totalTime}}。

## 半年度汇总
{{halfYearlySum}}

## 年度总结
本年度主要成果、经验和不足...

## 明年规划
明年工作目标和重点方向...`;
  }

  // 辅助方法
  private formatTime(minutes: number): string {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}小时${mins}分钟` : `${mins}分钟`;
  }

  private getTaskStatusText(status: TaskStatus): string {
    const statusMap = {
      [TaskStatus.PENDING]: '待开始',
      [TaskStatus.IN_PROGRESS]: '进行中',
      [TaskStatus.COMPLETED]: '已完成',
      [TaskStatus.CANCELLED]: '已取消'
    };
    return statusMap[status];
  }

  private getWeekNumber(date: Date): number {
    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
    const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;
    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);
  }

  // 定时生成报告
  public scheduleAutoGeneration(): void {
    if (!this.config.enableAutoGeneration || !this.config.generateOnSchedule) {
      return;
    }

    const [hours, minutes] = this.config.scheduleTime.split(':').map(Number);
    const now = new Date();
    const scheduledTime = new Date();
    scheduledTime.setHours(hours, minutes, 0, 0);

    // 如果今天的时间已过，设置为明天
    if (scheduledTime <= now) {
      scheduledTime.setDate(scheduledTime.getDate() + 1);
    }

    const timeUntilScheduled = scheduledTime.getTime() - now.getTime();

    setTimeout(() => {
      this.generateScheduledReports();
      // 设置每日重复
      setInterval(() => {
        this.generateScheduledReports();
      }, 24 * 60 * 60 * 1000);
    }, timeUntilScheduled);
  }

  private generateScheduledReports(): void {
    // 这里可以根据配置自动生成相应的报告
    console.log('自动生成报告任务执行中...');
    // 实际实现需要获取数据并调用相应的生成方法
  }
}

export default AutoReportService;