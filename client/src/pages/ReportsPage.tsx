import React, { useState, useEffect } from 'react';
import { Plus, FileText, Calendar, BarChart3, Edit3, Save, X, Download, Settings } from 'lucide-react';
import { 
  Report, 
  ReportType, 
  ReportStatistics 
} from '../types';
import { AutoReportService } from '../services/AutoReportService';

const ReportsPage: React.FC = () => {
  // 数据持久化相关常量
  const STORAGE_KEY = 'work_log_reports';

  // 从localStorage加载数据
  const loadReportsFromStorage = (): Report[] => {
    try {
      const savedReports = localStorage.getItem(STORAGE_KEY);
      if (savedReports) {
        const parsedReports = JSON.parse(savedReports);
        // 转换日期字符串回Date对象
        return parsedReports.map((report: any) => ({
          ...report,
          startDate: new Date(report.startDate),
          endDate: new Date(report.endDate),
          createdAt: new Date(report.createdAt),
          updatedAt: new Date(report.updatedAt)
        }));
      }
    } catch (error) {
      console.error('加载报告数据失败:', error);
    }
    return [];
  };

  // 保存数据到localStorage
  const saveReportsToStorage = (reportsToSave: Report[]) => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(reportsToSave));
    } catch (error) {
      console.error('保存报告数据失败:', error);
    }
  };

  // 初始化数据
  const initializeReports = (): Report[] => {
    const savedReports = loadReportsFromStorage();
    
    // 如果没有保存的数据，使用默认示例数据
    if (savedReports.length === 0) {
      const mockReports: Report[] = [
        {
          id: 'report-1',
          title: '2024年第一季度工作报告',
          type: ReportType.QUARTERLY_REPORT,
          period: '2024年第1季度',
          year: 2024,
          quarter: 1,
          startDate: new Date('2024-01-01'),
          endDate: new Date('2024-03-31'),
          content: '本季度主要完成了项目A的开发工作，包括需求分析、系统设计、编码实现和测试。同时参与了项目B的前期调研工作。',
          autoGenerated: true,
          isEdited: false,
          sourceReportIds: ['monthly-1', 'monthly-2', 'monthly-3'],
          sourceWorkLogIds: [],
          statistics: {
            totalTasks: 45,
            completedTasks: 42,
            totalTimeSpent: 2400,
            plannedTasksCount: 38,
            unplannedTasksCount: 7,
            completionRate: 93.3,
            categoryBreakdown: [
              { categoryId: 'cat-1', categoryName: '开发', timeSpent: 1800, taskCount: 30 },
              { categoryId: 'cat-2', categoryName: '测试', timeSpent: 360, taskCount: 8 },
              { categoryId: 'cat-3', categoryName: '文档', timeSpent: 240, taskCount: 7 }
            ]
          },
          userId: 'user1',
          createdAt: new Date('2024-04-01'),
          updatedAt: new Date('2024-04-01')
        },
        {
          id: 'report-2',
          title: '2024年3月工作月报',
          type: ReportType.MONTHLY_REPORT,
          period: '2024年3月',
          year: 2024,
          month: 3,
          startDate: new Date('2024-03-01'),
          endDate: new Date('2024-03-31'),
          content: '本月主要完成了项目A的测试阶段工作，修复了发现的bug，完成了用户手册的编写。',
          autoGenerated: true,
          isEdited: true,
          sourceReportIds: ['weekly-9', 'weekly-10', 'weekly-11', 'weekly-12'],
          sourceWorkLogIds: [],
          statistics: {
            totalTasks: 18,
            completedTasks: 17,
            totalTimeSpent: 960,
            plannedTasksCount: 15,
            unplannedTasksCount: 3,
            completionRate: 94.4,
            categoryBreakdown: [
              { categoryId: 'cat-1', categoryName: '开发', timeSpent: 480, taskCount: 10 },
              { categoryId: 'cat-2', categoryName: '测试', timeSpent: 360, taskCount: 6 },
              { categoryId: 'cat-3', categoryName: '文档', timeSpent: 120, taskCount: 2 }
            ]
          },
          userId: 'user1',
          createdAt: new Date('2024-04-01'),
          updatedAt: new Date('2024-04-02')
        },
        {
          id: 'report-3',
          title: '2024年第12周工作周报',
          type: ReportType.WEEKLY_REPORT,
          period: '2024年第12周',
          year: 2024,
          week: 12,
          startDate: new Date('2024-03-18'),
          endDate: new Date('2024-03-24'),
          content: '本周完成了项目A的最终测试，修复了2个关键bug，完成了部署文档的编写。',
          autoGenerated: true,
          isEdited: false,
          sourceReportIds: [],
          sourceWorkLogIds: ['log-1', 'log-2', 'log-3', 'log-4', 'log-5'],
          statistics: {
            totalTasks: 8,
            completedTasks: 7,
            totalTimeSpent: 240,
            plannedTasksCount: 6,
            unplannedTasksCount: 2,
            completionRate: 87.5,
            categoryBreakdown: [
              { categoryId: 'cat-1', categoryName: '开发', timeSpent: 120, taskCount: 4 },
              { categoryId: 'cat-2', categoryName: '测试', timeSpent: 90, taskCount: 3 },
              { categoryId: 'cat-3', categoryName: '文档', timeSpent: 30, taskCount: 1 }
            ]
          },
          userId: 'user1',
          createdAt: new Date('2024-03-25'),
          updatedAt: new Date('2024-03-25')
        }
      ];
      
      saveReportsToStorage(mockReports);
      return mockReports;
    }
    
    return savedReports;
  };

  const [reports, setReports] = useState<Report[]>(initializeReports);
  const [selectedType, setSelectedType] = useState<ReportType | 'ALL'>('ALL');
  const [selectedYear, setSelectedYear] = useState<number>(new Date().getFullYear());
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedReport, setSelectedReport] = useState<Report | null>(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showAutoReportConfig, setShowAutoReportConfig] = useState(false);
  const [autoReportService] = useState(() => AutoReportService.getInstance());

  // 监听报告数据变化并保存到localStorage
  useEffect(() => {
    saveReportsToStorage(reports);
  }, [reports]);

  const getReportTypeLabel = (type: ReportType): string => {
    const labels = {
      [ReportType.DAILY_LOG]: '日志',
      [ReportType.WEEKLY_REPORT]: '周报',
      [ReportType.MONTHLY_REPORT]: '月报',
      [ReportType.QUARTERLY_REPORT]: '季报',
      [ReportType.HALF_YEARLY_REPORT]: '半年报',
      [ReportType.YEARLY_REPORT]: '年报'
    };
    return labels[type];
  };

  const formatTime = (minutes: number): string => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}小时${mins}分钟` : `${mins}分钟`;
  };

  const formatDate = (date: Date): string => {
    return date.toLocaleDateString('zh-CN');
  };

  const filteredReports = reports.filter(report => {
    if (selectedType !== 'ALL' && report.type !== selectedType) return false;
    if (report.year !== selectedYear) return false;
    return true;
  });

  const handleGenerateReport = (type: ReportType) => {
    // 模拟生成报告的逻辑
    const now = new Date();
    const newReport: Report = {
      id: `report-${Date.now()}`,
      title: `${selectedYear}年新生成的${getReportTypeLabel(type)}`,
      type,
      period: type === ReportType.WEEKLY_REPORT ? '周报' :
              type === ReportType.MONTHLY_REPORT ? '月报' :
              type === ReportType.QUARTERLY_REPORT ? '季报' :
              type === ReportType.HALF_YEARLY_REPORT ? '半年报' :
              '年报',
      year: selectedYear,
      startDate: now,
      endDate: now,
      content: '这是自动生成的报告内容，您可以进行编辑修改。',
      autoGenerated: true,
      isEdited: false,
      sourceReportIds: [],
      sourceWorkLogIds: [],
      statistics: {
        totalTasks: 0,
        completedTasks: 0,
        totalTimeSpent: 0,
        plannedTasksCount: 0,
        unplannedTasksCount: 0,
        completionRate: 0,
        categoryBreakdown: []
      },
      userId: 'user1',
      createdAt: now,
      updatedAt: now
    };

    setReports([newReport, ...reports]);
    alert(`${getReportTypeLabel(type)}生成成功！`);
  };

  const ReportDetailModal = () => {
    if (!selectedReport) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-semibold">{selectedReport.title}</h3>
            <button
              onClick={() => setShowDetailModal(false)}
              className="text-gray-500 hover:text-gray-700"
            >
              ✕
            </button>
          </div>

          {/* 报告基本信息 */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-gray-50 p-3 rounded">
              <div className="text-sm text-gray-500">报告类型</div>
              <div className="font-medium">{getReportTypeLabel(selectedReport.type)}</div>
            </div>
            <div className="bg-gray-50 p-3 rounded">
              <div className="text-sm text-gray-500">时间范围</div>
              <div className="font-medium">
                {formatDate(selectedReport.startDate)} - {formatDate(selectedReport.endDate)}
              </div>
            </div>
            <div className="bg-gray-50 p-3 rounded">
              <div className="text-sm text-gray-500">生成方式</div>
              <div className="font-medium">
                {selectedReport.autoGenerated ? '自动生成' : '手动创建'}
                {selectedReport.isEdited && ' (已编辑)'}
              </div>
            </div>
            <div className="bg-gray-50 p-3 rounded">
              <div className="text-sm text-gray-500">完成率</div>
              <div className="font-medium text-green-600">
                {selectedReport.statistics.completionRate.toFixed(1)}%
              </div>
            </div>
          </div>

          {/* 统计数据 */}
          <div className="mb-6">
            <h4 className="text-lg font-semibold mb-4">统计数据</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="text-sm text-blue-600">总任务数</div>
                <div className="text-2xl font-bold text-blue-700">
                  {selectedReport.statistics.totalTasks}
                </div>
              </div>
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="text-sm text-green-600">已完成</div>
                <div className="text-2xl font-bold text-green-700">
                  {selectedReport.statistics.completedTasks}
                </div>
              </div>
              <div className="bg-purple-50 p-4 rounded-lg">
                <div className="text-sm text-purple-600">总耗时</div>
                <div className="text-2xl font-bold text-purple-700">
                  {formatTime(selectedReport.statistics.totalTimeSpent)}
                </div>
              </div>
              <div className="bg-orange-50 p-4 rounded-lg">
                <div className="text-sm text-orange-600">计划外任务</div>
                <div className="text-2xl font-bold text-orange-700">
                  {selectedReport.statistics.unplannedTasksCount}
                </div>
              </div>
            </div>

            {/* 分类统计 */}
            {selectedReport.statistics.categoryBreakdown.length > 0 && (
              <div>
                <h5 className="font-medium mb-2">分类统计</h5>
                <div className="space-y-2">
                  {selectedReport.statistics.categoryBreakdown.map((category, index) => (
                    <div key={index} className="flex items-center justify-between bg-gray-50 p-3 rounded">
                      <span className="font-medium">{category.categoryName}</span>
                      <div className="text-right">
                        <div className="text-sm text-gray-600">{category.taskCount} 个任务</div>
                        <div className="font-medium">{formatTime(category.timeSpent)}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* 报告内容 */}
          <div className="mb-6">
            <h4 className="text-lg font-semibold mb-4">报告内容</h4>
            <textarea
              value={selectedReport.content}
              onChange={(e) => setSelectedReport({ ...selectedReport, content: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={8}
              placeholder="请输入报告内容..."
            />
          </div>

          {/* 操作按钮 */}
          <div className="flex justify-end space-x-3">
            <button
              onClick={() => setShowDetailModal(false)}
              className="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300"
            >
              取消
            </button>
            <button
              onClick={() => {
                // 保存报告逻辑
                const updatedReports = reports.map(r => 
                  r.id === selectedReport.id ? { ...selectedReport, isEdited: true, updatedAt: new Date() } : r
                );
                setReports(updatedReports);
                setShowDetailModal(false);
                alert('报告保存成功！');
              }}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              保存报告
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-900">报告管理</h1>
        <div className="flex items-center space-x-4">
          <button
            onClick={() => setShowAutoReportConfig(true)}
            className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 flex items-center space-x-2"
          >
            <Settings className="w-4 h-4" />
            <span>自动报告配置</span>
          </button>
          <select
            value={selectedYear}
            onChange={(e) => setSelectedYear(parseInt(e.target.value))}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {[2024, 2023, 2022].map(year => (
              <option key={year} value={year}>{year}年</option>
            ))}
          </select>
          <select
            value={selectedType}
            onChange={(e) => setSelectedType(e.target.value as ReportType | 'ALL')}
            className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="ALL">所有类型</option>
            <option value={ReportType.DAILY_LOG}>日志</option>
            <option value={ReportType.WEEKLY_REPORT}>周报</option>
            <option value={ReportType.MONTHLY_REPORT}>月报</option>
            <option value={ReportType.QUARTERLY_REPORT}>季报</option>
            <option value={ReportType.HALF_YEARLY_REPORT}>半年报</option>
            <option value={ReportType.YEARLY_REPORT}>年报</option>
          </select>
        </div>
      </div>

      {/* 快速生成报告 */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
        <h2 className="text-lg font-semibold text-gray-900 mb-4">快速生成报告</h2>
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          {Object.values(ReportType).map(type => (
            <button
              key={type}
              onClick={() => handleGenerateReport(type)}
              className="bg-blue-50 hover:bg-blue-100 text-blue-700 px-4 py-3 rounded-lg border border-blue-200 transition-colors"
            >
              生成{getReportTypeLabel(type)}
            </button>
          ))}
        </div>
        <p className="text-sm text-gray-500 mt-4">
          点击按钮将自动汇总相应时间段的数据生成报告，生成后可进行编辑修改。
        </p>
      </div>

      {/* 报告列表 */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">报告列表</h2>
        </div>
        <div className="divide-y divide-gray-200">
          {filteredReports.length > 0 ? (
            filteredReports.map(report => (
              <div key={report.id} className="p-6 hover:bg-gray-50">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <h3 className="font-medium text-gray-900">{report.title}</h3>
                      <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                        {getReportTypeLabel(report.type)}
                      </span>
                      {report.autoGenerated && (
                        <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                          自动生成
                        </span>
                      )}
                      {report.isEdited && (
                        <span className="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full">
                          已编辑
                        </span>
                      )}
                    </div>
                    <div className="text-sm text-gray-600 mb-2">
                      时间范围: {formatDate(report.startDate)} - {formatDate(report.endDate)}
                    </div>
                    <div className="text-sm text-gray-500">
                      {report.content.substring(0, 100)}...
                    </div>
                  </div>
                  <div className="flex items-center space-x-4 ml-6">
                    <div className="text-right">
                      <div className="text-sm text-gray-500">完成率</div>
                      <div className="font-medium text-green-600">
                        {report.statistics.completionRate.toFixed(1)}%
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-sm text-gray-500">总任务</div>
                      <div className="font-medium">{report.statistics.totalTasks}</div>
                    </div>
                    <button
                      onClick={() => {
                        setSelectedReport(report);
                        setShowDetailModal(true);
                      }}
                      className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
                    >
                      查看详情
                    </button>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div className="p-12 text-center text-gray-500">
              暂无报告数据
            </div>
          )}
        </div>
      </div>

      {/* 报告详情模态框 */}
      {showDetailModal && <ReportDetailModal />}

      {/* 自动报告配置模态框 */}
      {showAutoReportConfig && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-semibold">自动报告配置</h3>
              <button
                onClick={() => setShowAutoReportConfig(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                ✕
              </button>
            </div>

            <div className="space-y-6">
              {/* 自动生成开关 */}
              <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                <div>
                  <h4 className="font-medium">启用自动报告生成</h4>
                  <p className="text-sm text-gray-600">系统将根据配置自动生成各类报告</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    checked={autoReportService.getConfig().enableAutoGeneration}
                    onChange={(e) => {
                      const config = autoReportService.getConfig();
                      autoReportService.updateConfig({ ...config, enableAutoGeneration: e.target.checked });
                    }}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                </label>
              </div>

              {/* 报告类型配置 */}
              <div>
                <h4 className="font-medium mb-4">报告类型配置</h4>
                <div className="space-y-3">
                  {Object.values(ReportType).map(type => {
                    const config = autoReportService.getConfig();
                    const isEnabled = config.reportTypes.includes(type);
                    return (
                      <div key={type} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <input
                            type="checkbox"
                            checked={isEnabled}
                            onChange={(e) => {
                              const currentConfig = autoReportService.getConfig();
                              const newReportTypes = e.target.checked
                                ? [...currentConfig.reportTypes, type]
                                : currentConfig.reportTypes.filter(t => t !== type);
                              autoReportService.updateConfig({
                                ...currentConfig,
                                reportTypes: newReportTypes
                              });
                            }}
                            className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                          />
                          <span className="font-medium">{getReportTypeLabel(type)}</span>
                        </div>
                        {isEnabled && (
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-gray-600">生成时间:</span>
                            <input
                              type="time"
                              value={config.scheduleTime || '09:00'}
                              onChange={(e) => {
                                const currentConfig = autoReportService.getConfig();
                                autoReportService.updateConfig({
                                  ...currentConfig,
                                  scheduleTime: e.target.value
                                });
                              }}
                              className="px-2 py-1 border border-gray-300 rounded text-sm"
                            />
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* 模板配置 */}
              <div>
                <h4 className="font-medium mb-4">报告模板</h4>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      包含统计图表
                    </label>
                    <input
                      type="checkbox"
                      checked={autoReportService.getConfig().includeCharts}
                      onChange={(e) => {
                        const config = autoReportService.getConfig();
                        autoReportService.updateConfig({ ...config, includeCharts: e.target.checked });
                      }}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="ml-2 text-sm text-gray-600">在报告中自动生成统计图表</span>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      包含详细统计
                    </label>
                    <input
                      type="checkbox"
                      checked={autoReportService.getConfig().includeStatistics}
                      onChange={(e) => {
                        const config = autoReportService.getConfig();
                        autoReportService.updateConfig({ ...config, includeStatistics: e.target.checked });
                      }}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="ml-2 text-sm text-gray-600">在报告中包含详细的统计数据</span>
                  </div>
                </div>
              </div>

              {/* 通知设置 */}
              <div>
                <h4 className="font-medium mb-4">通知设置</h4>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      生成完成通知
                    </label>
                    <input
                      type="checkbox"
                      checked={autoReportService.getConfig().notifyOnGeneration}
                      onChange={(e) => {
                        const config = autoReportService.getConfig();
                        autoReportService.updateConfig({ ...config, notifyOnGeneration: e.target.checked });
                      }}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                    />
                    <span className="ml-2 text-sm text-gray-600">报告生成完成后发送通知</span>
                  </div>
                </div>
              </div>
            </div>

            {/* 操作按钮 */}
            <div className="flex justify-end space-x-3 mt-6 pt-6 border-t border-gray-200">
              <button
                onClick={() => setShowAutoReportConfig(false)}
                className="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300"
              >
                取消
              </button>
              <button
                onClick={() => {
                  const currentConfig = autoReportService.getConfig();
                  autoReportService.saveConfig(currentConfig);
                  setShowAutoReportConfig(false);
                  alert('自动报告配置保存成功！');
                }}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              >
                保存配置
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ReportsPage;