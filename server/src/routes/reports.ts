import { Router, Response } from 'express';
import { v4 as uuidv4 } from 'uuid';
import Joi from 'joi';
import { db } from '../database/config';
import { asyncHandler, createError } from '../middleware/errorHandler';
import { AuthRequest, authenticateToken } from '../middleware/auth';
import { ApiResponse, PaginatedResponse, TaskStatus } from '../types';

const router = Router();

// 报告类型枚举
export enum ReportType {
  DAILY = 'daily',
  WEEKLY = 'weekly',
  MONTHLY = 'monthly',
  QUARTERLY = 'quarterly',
  SEMI_ANNUAL = 'semi_annual',
  ANNUAL = 'annual'
}

// 报告接口
export interface Report {
  id: string;
  title: string;
  type: ReportType;
  content: string;
  startDate: Date;
  endDate: Date;
  statistics: ReportStatistics;
  isAutoGenerated: boolean;
  userId: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface ReportStatistics {
  totalTasks: number;
  completedTasks: number;
  totalHours: number;
  plannedTasks: number;
  unplannedTasks: number;
  completionRate: number;
  categoryStats: Array<{
    categoryId: string;
    categoryName: string;
    taskCount: number;
    hours: number;
  }>;
}

// 验证模式
const reportSchema = Joi.object({
  title: Joi.string().min(1).max(200).required(),
  type: Joi.string().valid(...Object.values(ReportType)).required(),
  content: Joi.string().required(),
  startDate: Joi.date().required(),
  endDate: Joi.date().required(),
  isAutoGenerated: Joi.boolean().default(false)
});

// 获取报告列表
router.get('/', authenticateToken, asyncHandler(async (req: AuthRequest, res: Response<ApiResponse<PaginatedResponse<Report>>>) => {
  const userId = req.user!.id;
  const page = parseInt(req.query.page as string) || 1;
  const limit = parseInt(req.query.limit as string) || 20;
  const offset = (page - 1) * limit;
  const type = req.query.type as ReportType;
  const year = req.query.year ? parseInt(req.query.year as string) : undefined;

  // 构建查询条件
  let query = db('reports').where('user_id', userId);
  
  if (type) {
    query = query.where('type', type);
  }
  
  if (year) {
    query = query.whereRaw("strftime('%Y', start_date) = ?", [year.toString()]);
  }

  // 获取总数
  const totalQuery = query.clone();
  const [{ count }] = await totalQuery.count('* as count');
  const total = count as number;

  // 获取分页数据
  const records = await query
    .orderBy('created_at', 'desc')
    .limit(limit)
    .offset(offset);

  const reports: Report[] = records.map(record => ({
    id: record.id,
    title: record.title,
    type: record.type as ReportType,
    content: record.content,
    startDate: new Date(record.start_date),
    endDate: new Date(record.end_date),
    statistics: JSON.parse(record.statistics || '{}'),
    isAutoGenerated: Boolean(record.is_auto_generated),
    userId: record.user_id,
    createdAt: new Date(record.created_at),
    updatedAt: new Date(record.updated_at)
  }));

  res.json({
    success: true,
    data: {
      data: reports,
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit)
    }
  });
}));

// 生成报告
router.post('/generate', authenticateToken, asyncHandler(async (req: AuthRequest, res: Response<ApiResponse<Report>>) => {
  const userId = req.user!.id;
  const { type, startDate, endDate, title } = req.body;

  if (!type || !startDate || !endDate) {
    throw createError('报告类型、开始日期和结束日期是必填项', 400);
  }

  const start = new Date(startDate);
  const end = new Date(endDate);

  // 计算统计数据
  const statistics = await calculateReportStatistics(userId, start, end);
  
  // 生成报告内容
  const content = await generateReportContent(type, statistics, start, end);

  const reportId = uuidv4();
  const now = new Date();

  await db('reports').insert({
    id: reportId,
    title: title || `${getReportTypeLabel(type)} - ${start.toLocaleDateString()}`,
    type,
    content,
    start_date: start,
    end_date: end,
    statistics: JSON.stringify(statistics),
    is_auto_generated: false,
    user_id: userId,
    created_at: now,
    updated_at: now
  });

  const report: Report = {
    id: reportId,
    title: title || `${getReportTypeLabel(type)} - ${start.toLocaleDateString()}`,
    type: type as ReportType,
    content,
    startDate: start,
    endDate: end,
    statistics,
    isAutoGenerated: false,
    userId,
    createdAt: now,
    updatedAt: now
  };

  res.status(201).json({
    success: true,
    data: report,
    message: '报告生成成功'
  });
}));

// 更新报告
router.put('/:id', authenticateToken, asyncHandler(async (req: AuthRequest, res: Response<ApiResponse<Report>>) => {
  const userId = req.user!.id;
  const reportId = req.params.id;
  const { title, content } = req.body;

  const existingReport = await db('reports')
    .where({ id: reportId, user_id: userId })
    .first();

  if (!existingReport) {
    throw createError('报告不存在', 404);
  }

  const updateData: any = {
    updated_at: new Date()
  };

  if (title !== undefined) updateData.title = title;
  if (content !== undefined) updateData.content = content;

  await db('reports')
    .where({ id: reportId, user_id: userId })
    .update(updateData);

  // 获取更新后的报告
  const updatedRecord = await db('reports')
    .where({ id: reportId, user_id: userId })
    .first();

  const report: Report = {
    id: updatedRecord.id,
    title: updatedRecord.title,
    type: updatedRecord.type as ReportType,
    content: updatedRecord.content,
    startDate: new Date(updatedRecord.start_date),
    endDate: new Date(updatedRecord.end_date),
    statistics: JSON.parse(updatedRecord.statistics || '{}'),
    isAutoGenerated: Boolean(updatedRecord.is_auto_generated),
    userId: updatedRecord.user_id,
    createdAt: new Date(updatedRecord.created_at),
    updatedAt: new Date(updatedRecord.updated_at)
  };

  res.json({
    success: true,
    data: report,
    message: '报告更新成功'
  });
}));

// 删除报告
router.delete('/:id', authenticateToken, asyncHandler(async (req: AuthRequest, res: Response<ApiResponse>) => {
  const userId = req.user!.id;
  const reportId = req.params.id;

  const existingReport = await db('reports')
    .where({ id: reportId, user_id: userId })
    .first();

  if (!existingReport) {
    throw createError('报告不存在', 404);
  }

  await db('reports').where({ id: reportId, user_id: userId }).del();

  res.json({
    success: true,
    message: '报告删除成功'
  });
}));

// 辅助函数：计算报告统计数据
async function calculateReportStatistics(userId: string, startDate: Date, endDate: Date): Promise<ReportStatistics> {
  // 获取时间范围内的任务
  const tasks = await db('tasks')
    .where('user_id', userId)
    .where('created_at', '>=', startDate)
    .where('created_at', '<=', endDate);

  // 获取时间记录
  const timeLogs = await db('time_logs')
    .where('user_id', userId)
    .where('start_time', '>=', startDate)
    .where('start_time', '<=', endDate);

  // 计算基本统计
  const totalTasks = tasks.length;
  const completedTasks = tasks.filter(task => task.status === TaskStatus.COMPLETED).length;
  const totalHours = timeLogs.reduce((sum, log) => sum + (log.duration || 0), 0) / 3600; // 转换为小时

  // 计算计划内外任务
  const plannedTasks = tasks.filter(task => task.start_date && task.end_date).length;
  const unplannedTasks = totalTasks - plannedTasks;

  // 计算完成率
  const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;

  // 按分类统计
  const categoryStats = await db('tasks')
    .join('categories', 'tasks.category_id', 'categories.id')
    .where('tasks.user_id', userId)
    .where('tasks.created_at', '>=', startDate)
    .where('tasks.created_at', '<=', endDate)
    .groupBy('categories.id', 'categories.name')
    .select(
      'categories.id as categoryId',
      'categories.name as categoryName',
      db.raw('COUNT(tasks.id) as taskCount'),
      db.raw('COALESCE(SUM(tasks.actual_hours), 0) as hours')
    );

  return {
    totalTasks,
    completedTasks,
    totalHours,
    plannedTasks,
    unplannedTasks,
    completionRate,
    categoryStats: categoryStats.map(stat => ({
      categoryId: stat.categoryId,
      categoryName: stat.categoryName,
      taskCount: parseInt(stat.taskCount),
      hours: parseFloat(stat.hours)
    }))
  };
}

// 辅助函数：生成报告内容
async function generateReportContent(type: ReportType, statistics: ReportStatistics, startDate: Date, endDate: Date): Promise<string> {
  const typeLabel = getReportTypeLabel(type);
  const dateRange = `${startDate.toLocaleDateString()} - ${endDate.toLocaleDateString()}`;

  let content = `# ${typeLabel}报告\n\n`;
  content += `**报告期间：** ${dateRange}\n\n`;
  content += `## 📊 总体统计\n\n`;
  content += `- **总任务数：** ${statistics.totalTasks}\n`;
  content += `- **已完成任务：** ${statistics.completedTasks}\n`;
  content += `- **完成率：** ${statistics.completionRate.toFixed(1)}%\n`;
  content += `- **总工作时长：** ${statistics.totalHours.toFixed(1)} 小时\n`;
  content += `- **计划内任务：** ${statistics.plannedTasks}\n`;
  content += `- **计划外任务：** ${statistics.unplannedTasks}\n\n`;

  if (statistics.categoryStats.length > 0) {
    content += `## 📋 分类统计\n\n`;
    statistics.categoryStats.forEach(stat => {
      content += `### ${stat.categoryName}\n`;
      content += `- 任务数量：${stat.taskCount}\n`;
      content += `- 工作时长：${stat.hours.toFixed(1)} 小时\n\n`;
    });
  }

  content += `## 📈 分析与建议\n\n`;
  
  if (statistics.completionRate >= 80) {
    content += `✅ 完成率表现优秀（${statistics.completionRate.toFixed(1)}%），继续保持！\n\n`;
  } else if (statistics.completionRate >= 60) {
    content += `⚠️ 完成率良好（${statistics.completionRate.toFixed(1)}%），还有提升空间。\n\n`;
  } else {
    content += `❌ 完成率偏低（${statistics.completionRate.toFixed(1)}%），建议优化时间管理和任务规划。\n\n`;
  }

  if (statistics.unplannedTasks > statistics.plannedTasks) {
    content += `📝 计划外任务较多，建议加强任务规划和时间管理。\n\n`;
  }

  return content;
}

// 辅助函数：获取报告类型标签
function getReportTypeLabel(type: ReportType): string {
  const labels = {
    [ReportType.DAILY]: '日',
    [ReportType.WEEKLY]: '周',
    [ReportType.MONTHLY]: '月',
    [ReportType.QUARTERLY]: '季度',
    [ReportType.SEMI_ANNUAL]: '半年度',
    [ReportType.ANNUAL]: '年度'
  };
  return labels[type] || '未知';
}

export { router as reportRoutes };